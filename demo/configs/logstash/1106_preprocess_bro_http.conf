# Author: Justin Henderson
#         SANS Instructor and author of SANS SEC555: SIEM and Tactical Analytics
# Email: justin@hasecuritysolutions.com
# Last Update: 3/23/2018
#

filter {
  if [log_event_type] =~ /^bro_/ {
    json {
      source => "message"
      remove_field => "message"
    }
    grok {
      match => { "log_event_type" => "^bro_(?<event_type>[a-z0-9]+)" }
    }
    date {
      match => [ "ts", "ISO8601" ]
      remove_field => [ "ts" ]
    }
    mutate {
      replace => { "log_event_type" => "bro" }
      rename => { "id.orig_h" => "source_ip" }
      rename => { "id.orig_p" => "source_port" }
      rename => { "id.resp_h" => "destination_ip" }
      rename => { "id.resp_p" => "destination_port" }
    }
    if [event_type] == "conn" {
      mutate {
        rename => { "conn_state" => "connection_state" }
        rename => { "local_resp" => "local_respond" }
        rename => { "orig_bytes" => "original_bytes" }
        rename => { "orig_ip_bytes" => "original_bytes" }
        rename => { "orig_pkts" => "original_packets" }
        rename => { "resp_bytes" => "respond_bytes" }
        rename => { "resp_ip_bytes" => "respond_bytes" }
        rename => { "resp_pkts" => "respond_packets" }
        rename => { "sensorname" => "sensor_name" }
      }
      if [original_bytes] {
        if [respond_bytes] {
          ruby {
            code => "event.set('total_bytes',event.get('original_bytes') + event.get('respond_bytes'))"
          }
        }
      }
      translate {
        field => "connection_state"
        destination => "ConnectionStateDescription"
        dictionary => [
                      "S0", "Connection attempt seen, no reply",
                      "S1", "Connection established, not terminated",
                      "S2", "Connection established and close attempt by originator seen (but no reply from responder)",
                      "S3", "Connection established and close attempt by responder seen (but no reply from originator)",
                      "SF", "Normal SYN/FIN completion",
                      "REJ", "Connection attempt rejected",
                      "RSTO", "Connection established, originator aborted (sent a RST)",
                      "RSTR", "Established, responder aborted",
                      "RSTOS0", "Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder",
                      "RSTRH", "Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator",
                      "SH", "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open)",
                      "SHR", "Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator",
                      "OTH", "No SYN seen, just midstream traffic (a 'partial connection' that was not later closed)"
                      ]
      }
    }
    if [event_type] == "dhcp" {
      mutate {
        rename => { "trans_id" => "transaction_id" }
      }
    }
    if [event_type] == "dns" {
      mutate {
        rename => { "qclass" => "query_class" }
        rename => { "qclass_name" => "query_class_name" }
        rename => { "qtype_name" => "query_type_name" }
        rename => { "AA" => "authoritative_answer" }
        rename => { "RA" => "server_recursion_supported" }
        rename => { "RD" => "client_recursion_desired" }
        rename => { "TC" => "truncated_message" }
        rename => { "TTLs" => "ttls" }
        rename => { "Z" => "reserved_bit" }
      }
    }
    if [event_type] == "files" {
      mutate {
        rename => { "conn_uids" => "uid" }
        rename => { "rx_hosts" => "destination_ip" }
        rename => { "tx_hosts" => "source_ip" }
      }
    }
    if [event_type] == "http" {
      mutate {
        rename => { "host" => "virtual_host" }
        rename => { "request_body_len" => "request_body_length" }
        rename => { "response_body_len" => "response_body_length" }
        rename => { "status_msg" => "status_message" }
        rename => { "trans_id" => "transaction_id" }
        rename => { "trans_depth" => "transaction_depth" }
        rename => { "user_agent" => "useragent" }
        rename => { "version" => "http_version" }
              }
      if [useragent] == "-" {
        mutate {
          remove_field => [ "useragent" ]
        }
      }
    }
    if [event_type] == "notice" {
      mutate {
        rename => { "dst" => "destination_ip" }
        rename => { "msg" => "notice_message" }
        rename => { "p" => "destination_port" }
        rename => { "peer_descr" => "peer_description" }
        rename => { "sub" => "subject" }
      }
    }
    if [event_type] == "rdp" {
      mutate {
        rename => { "cert_count" => "certificate_count" }
      }
    }
    if [event_type] == "software" {
      mutate {
        rename => { "version.major" => "version_major" }
        rename => { "version.minor" => "version_minor" }
        rename => { "version.minor2" => "version_minor_two" }
        rename => { "version.minor3" => "version_minor_three" }
        rename => { "version.addl" => "version_additional_info" }
      }
    }
    if [event_type] == "ssh" {
      mutate {
        rename => { "auth_attempts" => "authentication_attempts" }
        rename => { "auth_success" => "authentication_successful" }
        rename => { "cipher_alg" => "cipher_algorithm" }
        rename => { "compress_alg" => "compression_algorithm" }
        rename => { "host_key_alg" => "host_key_algorithm" }
        rename => { "kex_alg" => "kex_algorithm" }
        rename => { "mac_alg" => "mac_algorithm" }
      }
    }
    if [event_type] == "ssl" {
      mutate {
        rename => { "cert_chain_fuids" => "certificate_chain_fuids" }
        rename => { "client_cert_chain_fuids" => "client_certificate_chain_fuids" }
        rename => { "issuer" => "certificate_issuer" }
        rename => { "subject" => "certificate_subject" }
      }
      mutate {
        gsub => [ "certificate_subject", "\\\\,", "|" ]
        gsub => [ "certificate_issuer", "\\\\,", "|" ]
      }
      kv {
        include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
        field_split => ","
        source => "certificate_issuer"
      }
      mutate {
        rename => { "CN" => "issuer_common_name"}
        rename => { "C" => "issuer_country_code"}
        rename => { "O" => "issuer_organization"}
        rename => { "OU" => "issuer_organization_unit"}
        rename => { "ST" => "issuer_state"}
        rename => { "SN" => "issuer_surname"}
        rename => { "L" => "issuer_locality"}
        rename => { "DC" => "issuer_distinguished_name"}
        rename => { "GN" => "issuer_given_name"}
        rename => { "pseudonym" => "issuer_pseudonym"}
        rename => { "serialNumber" => "issuer_serial_number"}
        rename => { "title" => "issuer_title"}
        rename => { "initials" => "issuer_initials"}
      }
      kv {
        include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "GN", "pseudonym", "serialNumber", "title", "initials" ]
        field_split => ","
        source => "certificate_subject"
      }
      mutate {
        rename => { "CN" => "certificate_common_name"}
        rename => { "C" => "certificate_country_code"}
        rename => { "O" => "certificate_organization"}
        rename => { "OU" => "certificate_organization_unit"}
        rename => { "ST" => "certificate_state"}
        rename => { "SN" => "certificate_surname"}
        rename => { "L" => "certificate_locality"}
        rename => { "GN" => "certificate_given_name"}
        rename => { "pseudonym" => "certificate_pseudonym"}
        rename => { "serialNumber" => "certificate_serial_number"}
        rename => { "title" => "certificate_title"}
        rename => { "initials" => "certificate_initials"}
      }
      if [certificate_subject] == "-" {
        mutate {
          remove_field => [ "certificate_subject" ]
        }
      }
      if [certificate_issuer] == "-" {
        mutate {
          remove_field => [ "certificate_issuer" ]
        }
      }
      if [certificate_common_name] == "-" {
        mutate {
          remove_field => [ "certificate_common_name" ]
        }
      } 
      if [certificate_common_name] {
        ruby {
          code => "event.set('certificate_common_name_length', event.get('certificate_common_name').length)"
        }
      }
      if [issuer_common_name] == "-" {
        mutate {
          remove_field => [ "issuer_common_name" ]
        }
      } 
      if [issuer_common_name] {
        ruby {
          code => "event.set('issuer_common_name_length', event.get('issuer_common_name').length)"
        }
      }
      if [server_name] == "-" {
        mutate {
          remove_field => [ "server_name" ]
        }
      } 
      if [server_name] {
        ruby {
          code => "event.set('server_name_length', event.get('server_name').length)"
        }
      }
      if [certificate_chain_fuids] == "-" {
        mutate {
          remove_field => [ "certificate_chain_fuids" ]
        }
      } 
      if [certificate_chain_fuids] {
        ruby {
          code => "event.set('certificate_chain_count', event.get('certificate_chain_fuids').count(',') + 1)"
        }
        mutate {
          convert => [ "certificate_chain_length", "integer" ]
        }
      }
      if [client_certificate_chain_fuids] == "-" {
        mutate {
          remove_field => [ "client_certificate_chain_fuids" ]
        }
      }
      if [client_issuer] == "-" {
        mutate {
          remove_field => [ "client_issuer" ]
        }
      }
      if [client_subject] == "-" {
        mutate {
          remove_field => [ "client_subject" ]
        }
      }
      if [curve] == "-" {
        mutate {
          remove_field => [ "curve" ]
        }
      }
      if [issuer] == "-" {
        mutate {
          remove_field => [ "issuer" ]
        }
      }
      if [query] == "-" {
        mutate {
          remove_field => [ "query" ]
        }
      }
      if [subject] == "-" {
        mutate {
          remove_field => [ "subject" ]
        }
      }
      if [validation_status] == "-" {
        mutate {
          remove_field => [ "validation_status" ]
        }
      }
    }
    if [event_type] == "x509" {
      mutate {
        rename => { "basic_constraints.ca" => "basic_constraints_ca" }
        rename => { "certificate.curve" => "certificate_curve" }
        rename => { "certificate.exponent" => "certificate_exponent" }
        rename => { "certificate.issuer" => "certificate_issuer" }
        rename => { "certificate.key_alg" => "certificate_key_algorithm" }
        rename => { "certificate.key_length" => "certificate_key_length" }
        rename => { "certificate.key_type" => "certificate_key_type" }
        rename => { "certificate.not_valid_after" => "certificate_not_valid_after" }
        rename => { "certificate.not_valid_before" => "certificate_not_valid_before" }
        rename => { "certificate.serial" => "certificate_serial" }
        rename => { "certificate.sig_alg" => "certificate_signing_algorithm" }
        rename => { "certificate.subject" => "certificate_subject" }
        rename => { "certificate.version" => "certificate_version" }
        rename => { "san.dns" => "san_dns" }
      }
      mutate {
        gsub => [ "certificate_issuer", "\\\\,", "|" ]
        gsub => [ "certificate_subject", "\\\\,", "|" ]
      }
    
      kv {
        include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "DC", "GN", "pseudonym", "serialNumber", "title", "initials" ]
        field_split => ","
        source => "certificate_issuer"
      }
      mutate {
        rename => { "CN" => "issuer_common_name"}
        rename => { "C" => "issuer_country_code"}
        rename => { "O" => "issuer_organization"}
        rename => { "OU" => "issuer_organization_unit"}
        rename => { "ST" => "issuer_state"}
        rename => { "SN" => "issuer_surname"}
        rename => { "L" => "issuer_locality"}
        rename => { "DC" => "issuer_distinguished_name"}
        rename => { "GN" => "issuer_given_name"}
        rename => { "pseudonym" => "issuer_pseudonym"}
        rename => { "serialNumber" => "issuer_serial_number"}
        rename => { "title" => "issuer_title"}
        rename => { "initials" => "issuer_initials"}
      }
      kv {
        include_keys => [ "CN", "C", "O", "OU", "ST", "SN", "L", "GN", "pseudonym", "serialNumber", "title", "initials" ]
        field_split => ","
        source => "certificate_subject"
      }
      mutate {
        rename => { "CN" => "certificate_common_name"}
        rename => { "C" => "certificate_country_code"}
        rename => { "O" => "certificate_organization"}
        rename => { "OU" => "certificate_organization_unit"}
        rename => { "ST" => "certificate_state"}
        rename => { "SN" => "certificate_surname"}
        rename => { "L" => "certificate_locality"}
        rename => { "GN" => "certificate_given_name"}
        rename => { "pseudonym" => "certificate_pseudonym"}
        rename => { "serialNumber" => "certificate_serial_number"}
        rename => { "title" => "certificate_title"}
        rename => { "initials" => "certificate_initials"}
        convert => [ "certificate_key_length", "integer" ]
        convert => [ "certificate_not_valid_after", "integer" ]
        convert => [ "certificate_not_valid_before", "integer" ]
      }
      if [san_dns] == "-" {
        mutate {
          remove_field => [ "san_dns" ]
        }
      }
      if [san_email] == "-" {
        mutate {
          remove_field => [ "san_email" ]
        }
      }
      if [san_uri] == "-" {
        mutate {
          remove_field => [ "san_uri" ]
        }
      }
      if [san_ip] == "-" {
        mutate {
          remove_field => [ "san_ip" ]
        }
      }
      if [certificate_common_name] == "-" {
        mutate {
          remove_field => [ "certificate_common_name" ]
        }
      }
      if [certificate_common_name] {
        ruby {
          code => "event.set('certificate_common_name_length', event.get('certificate_common_name').length)"
        }
      }
      if [issuer_common_name] == "-" {
        mutate {
          remove_field => [ "issuer_common_name" ]
        }
      }
      if [issuer_common_name] {
        ruby {
          code => "event.set('issuer_common_name_length', event.get('issuer_common_name').length)"
        }
      }
      if [certificate_not_valid_after] == "-" {
        mutate {
          remove_field => [ "certificate_not_valid_after" ]
        }
      }
      if [certificate_not_valid_before] == "-" {
        mutate {
          remove_field => [ "certificate_not_valid_before" ]
        }
      }
      if [certificate_not_valid_after] and [certificate_not_valid_before] {
        ruby {
          code => "event.set('certificate_number_days_valid', ((event.get('certificate_not_valid_after') - event.get('certificate_not_valid_before')) / 86400).ceil)"
        }
        date {
          match => [ "certificate_not_valid_after", "UNIX" ]
          target => "certificate_not_valid_after"
        }
        date {
          match => [ "certificate_not_valid_before", "UNIX" ]
          target => "certificate_not_valid_before"
        }
      }
    }
  }
}
