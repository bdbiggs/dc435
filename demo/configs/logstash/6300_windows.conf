# Author: Justin Henderson
#         SANS Instructor and author of SANS SEC555: SIEM and Tactical Analytics
# Email: justin@hasecuritysolutions.com
# Last Update: 12/9/2016

filter {
  if [type] == "windows" {
#    json {
#      source => "message"
#    }
    date {
      match => ["EventTime", "YYYY-MM-dd HH:mm:ss"]
      remove_field => [ "EventTime" ]
    }
    if [Application] {
      grok {
        match => { "Application" => "\\device\\harddiskvolume%{INT}\\%{GREEDYDATA:ApplicationPath}" }
      }
      if [ApplicationPath] {
        mutate {
          add_field => { "ApplicationPathIgnoringx86" => "%{ApplicationPath}" }
        }
        mutate {
          gsub => [ "ApplicationPathIgnoringx86", "program files (x86)", "program files" ]
        }
      }
    }
    if [EventID] == 4634 {
      mutate {
        add_tag => [ "logoff" ]
      }
    }
    if [EventID] == 4624 or [EventID] == 528 or [EventID] == 540 or [EventID] == 552 or [EventID] == 682 or [EventID] == 4648 or [EventID] == 4778 {
      mutate {
        add_tag => [ "logon" ]
        add_tag => [ "alert_data" ]
      }
    }
    if [EventID] == 529 or [EventID] == 4625 or [EventID] == 530 or [EventID] == 531 or [EventID] == 532 or [EventID] == 533 or [EventID] == 534 or [EventID] == 535 or [EventID] == 536 or [EventID] == 536 or [EventID] == 537 or [EventID] == 538 or [EventID] == 539 or [EventID] == 4625 or [EventID] == 4771 {
      mutate {
        add_tag => [ "logon_failure" ]
        add_tag => [ "alert_data" ]
      }
    }
    # Criticl event IDs to monitor
    if [EventID] == 7030 or [EventID] == 4720 or [EventID] == 4722 or [EventID] == 4724 or [EventID] == 4738 or [EventID] == 4732 or [EventID] == 1102 or [EventID] == 1056 or [EventID] == 2003 or [EventID] == 2005 or [EventID] == 8003 or [EventID] == 8004 or [EventID] == 8006 or [EventID] == 8007 {
      mutate {
        add_tag => [ "alert_data" ]
      }
    }
    if [CommandLine] {
      ruby {
        code => "event.set('command_line_length', event.get('CommandLine').length)"
      }
      grok {
        match => { "CommandLine" => "(?<possible_base64_code>[A-Za-z0-9+/]{50,}[=]{0,2})" }
        tag_on_failure => []
      }
    }
    # Ignore broadcasts received by Sysmon
    if [EventID] == 3 and [SourceIp] =~ "255$" { drop {} }
    if [EventID] == 3 and [DestinationIp] =~ "255$" { drop {} }

    mutate {
      rename => [ "AccountName", "user" ]
      rename => [ "AccountType", "account_type" ]
      rename => [ "ActivityID", "activity_id" ]
      rename => [ "Category", "category" ]
      rename => [ "ClientAddress", "client_ip" ]
      rename => [ "Channel", "channel" ]
      rename => [ "CommandLine", "command_line" ]
      rename => [ "DCIPAddress", "domain_controller_ip" ]
      rename => [ "DCName", "domain_controller_name" ]
      rename => [ "DestAddress", "destination_ip" ]
      rename => [ "DestPort", "destination_port" ]
      rename => [ "EventID", "event_id" ]
      rename => [ "EventReceivedTime", "event_received_time" ]
      rename => [ "EventType", "event_type" ]
      rename => [ "GatewayIPAddress", "gateway_ip" ]
      rename => [ "IPAddress", "source_ip" ]
      rename => [ "Ipaddress", "source__ip" ]
      rename => [ "IpAddress", "source_ip" ]
      rename => [ "IPPort", "source_port" ]
      rename => [ "OpcodeValue", "opcode_value" ]
      rename => [ "PreAuthType", "preauthentication_type" ]
      rename => [ "PrincipleSAMName", "user" ]
      rename => [ "ProcessID", "process_id" ]
      rename => [ "ProviderGUID", "providerguid" ]
      rename => [ "RecordNumber", "record_number" ]
      rename => [ "RemoteAddress", "destination_ip" ]
      rename => [ "ServiceName", "service_name" ]
      rename => [ "ServiceID", "service_id" ]
      rename => [ "SeverityValue", "severity_value" ]
      rename => [ "SourceAddress", "source_ip" ]
      rename => [ "SourcePort", "source_port" ]
      rename => [ "SourceModuleName", "source_module_name" ]
      rename => [ "SourceModuleType", "source_module_type" ]
      rename => [ "SourceName", "source_name" ]
      rename => [ "SubjectUserName", "user" ]
      rename => [ "TaskName", "task_name" ]
      rename => [ "TargetDomainName", "target_domain_name" ]
      rename => [ "TargetUserName", "user" ]
      rename => [ "ThreadID", "thread_id" ]
      rename => [ "User_ID", "user" ]
      rename => [ "UserID", "user" ]
      rename => [ "username", "user" ]
    }
    mutate {
      convert => [ "command_line_length", "integer" ]
      convert => [ "destination_port", "integer" ]
      convert => [ "source_port", "integer" ]
    }
    if [source_name] == "Microsoft-Windows-AppLocker" {
      #grok {
      #  match => { "UserData" => "%{DATA}>%{DATA:xml}</RuleAndFileData>" }
      #}
      xml {
        source => "UserData"
        target => "applocker"
      }
      mutate {
        rename => [ "[applocker][FileHash]", "filehash" ]
        rename => [ "[applocker][FilePath]", "filepath" ]
        rename => [ "[applocker][Fqbn]", "fqbn" ]
        rename => [ "[applocker][PolicyName]", "policyname" ]
        rename => [ "[applocker][RuleId]", "ruleid" ]
        rename => [ "[applocker][RuleName]", "rulename" ]
        rename => [ "[applocker][RuleSddl]", "rulesddl" ]
        rename => [ "[applocker][TargetProcessId]", "targetprocessid" ]
        rename => [ "[applocker][TargetUser]", "user_sid" ]
      }
      if [event_id] == 8002 or [event_id] == 8005 {
        mutate {
          add_field =>  { "action" => "allow" } 
        }
      }
      if [event_id] == 8004 or [event_id] == 8007 {
        mutate {
          add_field =>  { "action" => "deny" } 
        }
      }
      if [event_id] == 8006 or [event_id] == 8003 {
        mutate {
          add_field =>  { "action" => "audit_deny" } 
        }
      }
      grok {
        match => { "Message" => "%{DATA:file} was allowed to run" }
        match => { "Message" => "%{DATA:file} was not allowed to run" }
        match => { "Message" => "%{DATA:file} was prevented from running" }
      }
      grok {
        match => { "file" => "\%%{DATA}\%%{GREEDYDATA:file_query}" }
      }
      if [file_query] {
        # Backslashes are odd to handle so convert to quad slash with single quotes and then remove single quotes
        mutate {
           gsub => [ "file_query", "[\\]", "'\\\\'" ]
        }
        mutate {
          gsub => [ "file_query", "'", "" ]
        }
        # Sleep for half a second to give correlation alert time to arrive first
        sleep {
          time => "0.5"
        }
        # Optional settings
        #elasticsearch {
        #  hosts => ["elasticsearch_server_name_goes_here"]
        #  index => "logstash-windows-*"
        #  query => "source_name:Microsoft-Windows-Sysmon AND event_id:7 AND Image:%{[file_query]}"
        #  fields => [["@timestamp","match_date"],["Hashes","hashes"],["Signed","signed"],["Signature","signature"],["SignatureStatus","signature_status"],["ProcessId","process_id"]]
        #}
        mutate {
          remove_field => [ "file_query" ]
        }
      }
    }
    if [event_id] == 4103 and [source_name] == "Microsoft-Windows-PowerShell" {
      grok {
        match => { "ContextInfo" => "\s+Severity = %{DATA:severity}\s+Host Name = %{DATA:shell_host_name}\s+Host Version = %{DATA:shell_host_version}\s+Host ID = %{DATA:shell_host_id}\s+Host Application = %{DATA:shell_host_application}\s+Engine Version = %{DATA:shell_engine_version}\s+Runspace ID = %{DATA:runspace_id}\s+Pipeline ID = %{INT:pipeline_id}\s+Command Name = %{DATA:command_name}\s+Command Type = %{DATA:command_type}\s+Script Name = %{DATA:Path}\s+Command Path = %{DATA:command_path}\s+Sequence Number = %{INT:sequence_number}\s+User = %{DATA:shell_user}\s+Connected User = %{DATA:connected_user}\s+Shell ID = %{GREEDYDATA:shell_id}" }
      }
      if [shell_host_application] {
        grok {
          match => { "shell_host_application" => "(?<possible_base64_code>[A-Za-z0-9+/]{50,}[=]{0,2})" }
          tag_on_failure => []
        }
        ruby {
          code => "event.set('shell_host_application_length', event.get('shell_host_application').length)"
        }
        mutate {
          convert => [ "shell_host_application_length", "integer" ]
        }
      }
    }
    if [event_id] == 4104 and [ScriptBlockText] and [source_name] == "Microsoft-Windows-PowerShell" {
      grok {
          match => { "ScriptBlockText" => "(?<possible_base64_code>[A-Za-z0-9+/]{50,}[=]{0,2})" }
          tag_on_failure => []
        }
        ruby {
          code => "event.set('script_block_text_length', event.get('ScriptBlockText').length)"
        }
        mutate {
          convert => [ "script_block_text_length", "integer" ]
        }
    }
    if [possible_base64_code] {
      mutate {
        add_tag => [ "possible_base64_encoding" ]
      }
      ruby {
        init => "require 'base64'"
        code => "a = Base64.decode64(event.get('possible_base64_code'));
                 #a = a.force_encoding('ASCII-8BIT').encode('UTF-8', :invalid => :replace, :undef => :replace, :replace => '');
                 event.set('base64_decoded', a);"
                 #if a.include? 'iex'
                 #  event.set('iex','true')
                 #end;"
      }
      #ruby {
      #  code => "a = event.get('possible_base64_code'); decode = `echo #{a} | base64 -d`; output = `if [[ #{decode} == *iex* ]]; then echo true; fi`; event.set('iex', output); "
      #}
    }
    if [Payload] and [event_id] == 4103 and [source_name] == "Microsoft-Windows-PowerShell" {
      ruby {
        code => "event.set('cmdlets', event.get('Payload').downcase.scan(/commandinvocation\(([a-z0-9-]+)\)/))"
      }
      #grok {
      #  match => { "Payload" => ""}
      #}
    }
    if [command_line] {
      if [command_line] =~ "iex" or [command_line] =~ "Invoke-Expression" {
        mutate {
          add_tag => [ "ps_iex" ]
        }
      }
      if [command_line] =~ "New-Object" and [command_line] =~ "Net.WebClient" {
        mutate {
          add_tag => [ "ps_webclient" ]
        }
      }
    }
    if [ScriptBlockText] {
      if [ScriptBlockText] =~ "iex" or [ScriptBlockText] =~ "Invoke-Expression" {
        mutate {
          add_tag => [ "ps_iex" ]
        }
      }
      if [ScriptBlockText] =~ "New-Object" and [ScriptBlockText] =~ "Net.WebClient" {
        mutate {
          add_tag => [ "ps_webclient" ]
        }
      }
    }
   
   if "ps_iex" not in [tags] and [base64_decoded] {
      mutate { add_tag => [ "test" ]  }
      grok {
        match => { "base64_decoded" => "(?<iex>iex)" }
      }
      if [base64_decoded] =~ "iex" or [base64_decoded] =~ "Invoke-Expression" {
        mutate { add_tag => [ "test2" ] }
        mutate {
          add_tag => [ "ps_iex" ]
        }
      }
    }
    if "ps_webclient" not in [tags] and [base64_decoded] {
      if [base64_decoded] =~ "New-Object" and [base64_decoded] =~ "Net.WebClient" {
        mutate {
          add_tag => [ "ps_webclient" ]
        }

      }
    }
   
   if "ps_iex" not in [tags] and [base64_decoded] {
      mutate { add_tag => [ "test" ]  }
      grok {
        match => { "base64_decoded" => "(?<iex>iex)" }
      }
      if [base64_decoded] =~ "iex" or [base64_decoded] =~ "Invoke-Expression" {
        mutate { add_tag => [ "test2" ] }
        mutate {
          add_tag => [ "ps_iex" ]
        }
      }
    }
    if "ps_webclient" not in [tags] and [base64_decoded] {
      if [base64_decoded] =~ "New-Object" and [base64_decoded] =~ "Net.WebClient" {
        mutate {
          add_tag => [ "ps_webclient" ]
        }
      }
    }
    if "ps_webclient" in [tags] and "ps_iex" in [tags] {
      mutate {
        add_tag => [ "alert_data", "ps_possible_web_code_use" ]
      }
    }
    # For any accounts that are service accounts or special accounts add the tag of service_account
    # This example applies the tag to any username that starts with SVC_.  If you use a different
    # standard change this.
    if [user] =~ "^DWM-*" or [user] == "SYSTEM" or [user] == "NETWORK SERVICE" or [user] == "LOCAL SERVICE" or [user] =~ "^SVC_*" {
      mutate {
        add_tag => [ "service_account" ]
      }
    }
    # This looks for events that are typically noisy but may be of use for deep dive investigations
    # A tag of noise is added to quickly filter out noise
    if [event_id] == 7036 or [source_name] == "Desktop Window Manager" or [category] == "Engine Lifecycle" or [category] == "Provider Lifecycle" {
      mutate {
        add_tag => [ "noise" ]
      }
    }
    #Identify machine accounts
    if [user] =~ /\$/ {
      mutate {
        add_tag => [ "machine", "noise" ]
      }
    }
  }
}
