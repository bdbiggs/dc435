# Author: Justin Henderson
# Email: jhenderson@tekrefresh.comes
# Last Update: 4/29/2017
#
# This conf file is based on accepting logs for suricata json events
filter {
  if [type] == "suricata" {
    if "test_data" not in [tags] {
      date {
        match => [ "timestamp", "ISO8601" ]
      }
    } else {
      mutate {
        remove_field => [ "timestamp" ]
      }
    }
    if [event_type] == "fileinfo" {
      #ruby {
      #  code => "if event.get('event_type') == 'fileinfo'; event.set('[fileinfo][type]',event.get('[fileinfo][magic]).to_s.split(',')[0]); end;" 
      #}
    }
	# I recommend renaming the fields below to be consistent with other log sources.  This makes it easy to "pivot" between logs
    mutate {
      rename => [ "src_ip", "source_ip" ]
      rename => [ "dest_ip", "destination_ip" ]
      rename => [ "src_port", "source_port" ]
      rename => [ "dest_port", "destination_port" ]
      rename => [ "[flow][age]", "duration" ]
      rename => [ "[flow][alerted]", "flow_alerted" ]
      rename => [ "[flow][bytes_toclient]", "bytes_to_client" ]
      rename => [ "[flow][bytes_toserver]", "bytes_to_server" ]
      rename => [ "[flow][end]", "flow_end" ]
      rename => [ "[flow][pkts_toclient]", "packets_to_client" ]
      rename => [ "[flow][pkts_toserver]", "packets_to_server" ]
      rename => [ "[flow][reason]", "reason" ]
      rename => [ "[flow][start]", "flow_start" ]
      rename => [ "[flow][state]", "state" ]
      rename => [ "[netflow][age]", "duration" ]
      rename => [ "[netflow][bytes]", "bytes" ]
      rename => [ "[netflow][end]", "netflow_end" ]
      rename => [ "[netflow][start]", "netflow_start" ]
      rename => [ "[netflow][pkts]", "packets" ]
      rename => [ "[alert][action]", "action" ]
      rename => [ "[alert][category]", "category" ]
      rename => [ "[alert][gid]", "gid" ]
      rename => [ "[alert][rev]", "rev" ]
      rename => [ "[alert][severity]", "severity" ]
      rename => [ "[alert][signature]", "signature" ]
      rename => [ "[alert][signature_id]", "sid" ]
      rename => [ "[http][hostname]", "virtual_host" ]
      rename => [ "[http][http_content_type]", "http_content_type" ]
      rename => [ "[http][http_method]", "method" ]
      rename => [ "[http][http_user_agent]", "useragent" ]
      rename => [ "[http][length]", "http_payload_length" ]
      rename => [ "[http][protocol]", "http_version" ]
      rename => [ "[http][status]", "status_message" ]
      rename => [ "[http][url]", "url" ]
      rename => [ "[tls][fingerprint]", "certificate_serial_number" ]
      rename => [ "[tls][issuerdn]", "issuer_distinguished_name" ]
      rename => [ "[tls][notafter]", "certificate_not_valid_after" ]
      rename => [ "[tls][notbefore]", "certificate_not_valid_before" ]
      rename => [ "[tls][subject]", "certificate_common_name" ]
      rename => [ "[tls][version]", "tls_version" ]
      add_tag => [ "ids" ]
    }
    if [bytes_to_client] and [bytes_to_server] {
      if [bytes_to_client] < [bytes_to_server] {
        ruby {
          code => "event.set('byte_ratio_client', event.get('bytes_to_client').to_f / event.get('bytes_to_server').to_f)"
        }
        ruby {
          code => "event.set('byte_ratio_server', 1 - event.get('byte_ratio_client'))"
        }
      } else {
        ruby {
          code => "event.set('byte_ratio_server', event.get('bytes_to_server').to_f / event.get('bytes_to_client').to_f)"
        }
        ruby {
          code => "event.set('byte_ratio_client', 1 - event.get('byte_ratio_server'))"
        }
      }
      # OPTIONAL - LOOKUP DNS INFORMATION ON CERTAIN CONNECTIONS
      # Update elasticsearch host info for this to work
      if [bytes_to_client] > 10000000 {
        elasticsearch {
          hosts => ["es_server_goes_here"]
          index => "logstash-bro-*"
          query => "type:dns AND answers:%{[destination_ip]}"
          fields => [["highest_registered_domain","highest_registered_domain"],["parent_domain","parent_domain"],["parent_domain_length","parent_domain_length"],["query","query"],["query_length","query_length"],["sub_domain","sub_domain"]]
        }
      }
      if [bytes_to_server] > 1000000 {
        elasticsearch {
          hosts => ["es_server_goes_here"]
          index => "logstash-bro-*"
          query => "type:dns AND answers:%{[destination_ip]}"
          fields => [["highest_registered_domain","highest_registered_domain"],["parent_domain","parent_domain"],["parent_domain_length","parent_domain_length"],["query","query"],["query_length","query_length"],["sub_domain","sub_domain"]]
        }
      }
      if [duration] > 14399 {
        elasticsearch {
          hosts => ["es_server_goes_here"]
          index => "logstash-bro-*"
          query => "type:dns AND answers:%{[destination_ip]}"
          fields => [["highest_registered_domain","highest_registered_domain"],["parent_domain","parent_domain"],["parent_domain_length","parent_domain_length"],["query","query"],["query_length","query_length"],["sub_domain","sub_domain"]]
        }
      }
      if [signature] !~ "SCAN" and [signature] !~ "POLICY" and [event_type] == "alert" {
        elasticsearch {
          hosts => ["es_server_goes_here"]
          index => "logstash-bro-*"
          query => "type:dns AND answers:%{[destination_ip]}"
          fields => [["highest_registered_domain","highest_registered_domain"],["parent_domain","parent_domain"],["parent_domain_length","parent_domain_length"],["query","query"],["query_length","query_length"],["sub_domain","sub_domain"]]
        }
      }
    }
	# This will translate the alert.severity field into a severity field of either High, Medium, or Low
    if [event_type] == "alert" {
      if [severity] == 1 {
        mutate {
          add_field => { "severity_level" => "High" }
        }
      }
      if [severity] == 2 {
        mutate {
          add_field => { "severity_level" => "Medium" }
        }
      }
      if [severity] == 3 {
        mutate {
          add_field => { "severity_level" => "Low" }
        }
      }
	  # If the alert is a Snort GPL alert break it apart for easier reading and categorization
      if [signature] =~ "GPL " {
	    # This will parse out the category type from the alert
        grok {
          match => { "signature" => "GPL\s+%{DATA:category}\s" }
        }
		# This will store the category
        mutate {
          add_field => { "rule_type" => "Snort GPL" }
          lowercase => [ "category" ]
        }
      }
	  # If the alert is an Emerging Threat alert break it apart for easier reading and categorization
      if [signature] =~ "ET " {
	    # This will parse out the category type from the alert
        grok {
          match => { "signature" => "ET\s+%{DATA:category}\s" }
        }
		# This will store the category
        mutate {
          add_field => { "rule_type" => "Emerging Threats" }
          lowercase => [ "category" ]
        }
      }
      if [gid] == 1 and [sid] =~ '^[0-9]+$' {
        ruby {
          code => "sid = event.get('sid'); event.set('rule', `cat /etc/nsm/rules/*.rules | grep sid:#{sid}`)"
        } 
      }
      # If rule is extracted try to parse out important rule metadata
      if [rule] {
        grok {
          break_on_match => false
          match => { "rule" => "(?<ms_security_bulletin>MS[01][0-9]-[0-9]+)" }
          match => { "rule" => "cve,(?<cve>[0-9]{0,4}-[0-9]+)" }
          match => { "rule" => "bugtraq,(?<bugtraq>[0-9]+)" }
          match => { "rule" => "securityfocus.com/bid/(?<bid>[0-9]+)" }
          match => { "rule" => "osvdb/(?<osvdb>[0-9]+)" }
          match => { "rule" => "exploit-db.com/exploits/(?<exploit_db_id>[0-9]+)" }
          tag_on_failure => []
        }
      }
	  # This section adds URLs to lookup information about a rule online
      if [rule_type] == "Snort GPL" {
        mutate {
          add_field => [ "signature_info", "https://www.snort.org/search?query=%{gid}-%{sid}" ]
        }
      }
      if [rule_type] == "Emerging Threats" {
        mutate {
          add_field => [ "signature_info", "http://doc.emergingthreats.net/%{sid}" ]
        }
      }
    }
  }
  if [type] == "suricata" {
    if "_grokparsefailure" not in [tags] and "_csvparsefailure" not in [tags] and "_jsonparsefailure" not in [tags] {
    #  mutate {
    #    remove_field => [ "message" ]
    #  }
    }
  }
}
